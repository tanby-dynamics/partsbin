@page "/part/{Id:int}"
@using partsbin.Services
@using partsbin.Logic.Helpers
@using partsbin.Logic.Services
@using partsbin.Services.Models
@inject IPartService PartService;
@inject IPartUiService PartUiService;
@inject IToastService ToastService;
@inject NavigationManager NavigationManager;
@inject IConfirmUiService ConfirmUiService;

@if (_part is not null)
{
    <h3>
        @_part.GetDescription() - @_part.GetFormattedQuantity()
        @if (Duplicate == 1)
        {
            <strong>&nbsp;(duplicate)</strong>
        }
    </h3>
}
else
{
    <div class="alert alert-danger" role="alert">
        <h3 class="alert-heading">Part not found</h3>
        <p>The part could not be found. You might have followed an invalid link, or the part may have been deleted.</p>
    </div>
}

@if (_part is not null)
{
    <div class="card">
        <h5 class="card-header">
            <div class="row">
                <div class="col-6">
                    <PartQuantity Part="_part"
                                  PartChanged="@OnPartChanged"/>
                </div>
                <div class="col-6 text-end">
                    <div class="dropdown">
                        <button class="btn btn-outline-primary dropdown-toggle"
                                type="button"
                                data-bs-toggle="dropdown"
                                aria-expanded="false">
                            Actions
                        </button>
                        <ul class="dropdown-menu">
                            <li>
                                <button class="dropdown-item"
                                        type="button"
                                        @onclick:preventDefault
                                        @onclick="@DuplicatePart">
                                    Duplicate part
                                </button>
                            </li>
                            <li><hr class="dropdown-divider"/></li>
                            <li>
                                <button class="dropdown-item"
                                        type="button"
                                        @onclick:preventDefault
                                        @onclick="@DeletePart">
                                    Delete part
                                </button>
                            </li>
                        </ul>
                    </div>
                </div>
            </div>
        </h5>
        <div class="card">
            <div class="card-body">
                <div class="card-text">
                    <div class="row">
                        <div class="col-lg-4 col-md-12">
                            <p class="card-text">
                                <PartDetails Part="_part"/>
                            </p>
                        </div>
                        <div class="col-lg-8 col-md-12">
                            <h4>
                                Notes
                                @if (!_isEditingNotes)
                                {
                                    <button class="btn btn-sm btn-outline-primary"
                                            style="margin-left:1rem"
                                            @onclick:preventDefault
                                            @onclick="@EditNotes">
                                        <i class="oi oi-pencil"></i> Edit
                                    </button>
                                }
                            </h4>
                            @if (!_isEditingNotes)
                            {
                                @if (_part.HtmlNotes.HasContent())
                                {
                                    @((MarkupString)_part.HtmlNotes)
                                }
                                else
                                {
                                    <div class="alert alert-info" role="alert">
                                        No notes
                                    </div>
                                }
                            }
                            else
                            {
                                <PartNotesEditor Part="_part"
                                                 OnEditComplete="CompleteEditingNotes"
                                                 OnEditCancelled="CancelEditingNotes"/>
                            }
                        </div>
                    </div>
                </div>
            </div>
            <div class="card-footer">
                <button @onclick="Edit" 
                        class="btn btn-sm btn-outline-primary">
                    <i class="oi oi-pencil"></i> Edit details
                </button>
            </div>
        </div>
    </div>

    <br/>
    <div class="row">
        <div class="col-6">
            <Documentation Part="_part"/>
            <br/>
            <PartSuppliers Part="_part"/>
        </div>
        <div class="col-6">
            <Gallery Part="_part"/>
        </div>
    </div>
}

@code {
    [Parameter]
    public int Id { get; set; }
    private Part? _part;
    private bool _isEditingNotes;

    [Parameter]
    [SupplyParameterFromQuery(Name = "d")]
    public int? Duplicate { get; set; } = 0;

    protected override async void OnInitialized()
    {
        await RefreshData();
    }

    private async Task RefreshData()
    {
        _part = await PartService.GetPart(Id);
        StateHasChanged();
    }

    private async void Edit()
    {
        await PartUiService.EditPart(_part!);
        await RefreshData();
        ToastService.ShowSuccess("The part details have been updated");
    }

    private void EditNotes()
    {
        _isEditingNotes = true;
        StateHasChanged();
    }

    private void CompleteEditingNotes()
    {
        _isEditingNotes = false;
        ToastService.ShowSuccess("The notes have been updated");
        StateHasChanged();
    }

    private void CancelEditingNotes()
    {
        _isEditingNotes = false;
        StateHasChanged();
    }

    private async void DuplicatePart()
    {
        var confirmResult = await ConfirmUiService.Confirm(
            "Duplicating part",
            "Are you sure you want to duplicate this part?");
        if (confirmResult == ConfirmResult.Cancelled) return;
        
        var duplicatePart = await PartService.Duplicate(_part!);
        NavigationManager.NavigateTo($"/part/{duplicatePart.Id}?d=1");
        ToastService.ShowSuccess("The part has been duplicated, you are working on the duplicate part now");
    }

    private async Task DeletePart()
    {
        var result = await ConfirmUiService.Confirm("Delete part", "Are you sure you want to delete this part?");
        if (result == ConfirmResult.Cancelled) return;
            
        _part!.IsDeleted = true;
        await PartService.UpdatePart(_part);
        
        ToastService.ShowSuccess(
            "The part has been deleted. You can recover it from the rubbish bin.",
            settings => settings.OnClick = () => NavigationManager.NavigateTo("/rubbish-bin"));
        NavigationManager.NavigateTo("/");
    }

    private void OnPartChanged(Part part)
    {
        _part = part;
        StateHasChanged();
    }
}