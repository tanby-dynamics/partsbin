@page "/rubbish-bin"
@using partsbin.Helpers
@using partsbin.Services
@inject IPartService PartService
@inject IToastService ToastService;

<div class="container-fluid">
    <div class="row">
        <div class="col"><h3>Rubbish bin</h3></div>
        <div class="col-2 text-end">
            <button class="btn btn-danger"
                    @onclick="EmptyRubbishBin"
                    @onclick:preventDefault>
                Empty permanently
            </button>
        </div>
    </div>
</div>


@if (!_parts.Any())
{
    <div class="alert alert-info" role="alert">
        No parts have been deleted
    </div>
}
else
{
    <table class="table border">
        <thead>
        <tr>
            <th>Part type</th>
            <th>Range</th>
            <th>Part name</th>
            <th>Package type</th>
            <th>Value</th>
            <th>Manufacturer</th>
            <th>Part number</th>
            <th>Location</th>
            <th>Quantity</th>
            <th>Actions</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var part in _parts)
        {
            <tr>
                <td>@part.PartType.PresentationFormat()</td>
                <td>@part.Range.PresentationFormat()</td>
                <td>@part.PartName.PresentationFormat()</td>
                <td>@part.PackageType.PresentationFormat()</td>
                <td>@part.FormattedValue</td>
                <td>@part.PartNumber.PresentationFormat()</td>
                <td>@part.Location.PresentationFormat()</td>
                <td>@part.PartType.PresentationFormat()</td>
                <td>@part.FormattedQuantity</td>
                <td>
                    <button class="btn btn-outline-success"
                            @onclick="@(() => RestorePart(part))"
                            @onclick:preventDefault
                            title="Restore part">
                        <i class="oi oi-action-undo"></i>
                    </button>
                </td>
            </tr>
        }
        </tbody>
    </table>
}

@code {
    private List<Part> _parts = new();

    protected override void OnParametersSet()
    {
        RefreshData();
    }

    private void RefreshData()
    {
        _parts = PartService.GetDeletedParts()
            .OrderBy(x => x.PartType)
            .ThenBy(x => x.Range)
            .ThenBy(x => x.PartName)
            .ThenBy(x => x.PartNumber)
            .ThenBy(x => x.Value)
            .ToList();
        StateHasChanged();
    }

    private void RestorePart(Part part)
    {
        part.IsDeleted = false;
        PartService.UpdatePart(part);
        _parts.Remove(part);
        ToastService.ShowSuccess("The part has been restored");
        StateHasChanged();
    }

    private void EmptyRubbishBin()
    {
        PartService.EmptyRubbishBin();
        _parts.Clear();
        ToastService.ShowSuccess("The rubbish bin has been emptied");
        StateHasChanged();
    }
}