@using partsbin.Services
@using partsbin.Helpers
@using System.Net.Mime
@using partsbin.BusinessLogic.Models
@using partsbin.BusinessLogic.Services
@using partsbin.Shared.Notes
@inject IImageService ImageService;
@inject IModalService ModalService
@inject IConfirmUiService ConfirmUiService;
@inject IFileService FileService;

<div class="card">
    <div class="card-header">
        <h4>Gallery</h4>
    </div>
    <div class="card-body">
        <div class="card-text">
            <div class="input-group">
                <label class="input-group-text" for="uploadImagesFile">Upload multiple images</label>
                <InputFile type="file" 
                           OnChange="@UploadImages"
                           class="form-control" 
                           id="uploadImagesFile"
                           multiple
                           accept="image/*"/>
            </div>
            <br/>
            
            @if (_gallery is null)
            {
                <p>Loading...</p>
            }
            else
            {
                <div class="container">
                    <div class="row">
                        @foreach (var image in _gallery)
                        {
                            <div class="col-6" style="margin-bottom:10px">
                                <div class="input-group input-group-sm" style="margin-bottom:10px">
                                    <span class="input-group-text">@image.FileName</span>
                                </div>
                                <img src="/api/file/@image.FileId"
                                     class="img-fluid rounded"
                                     alt="@image.FileName"
                                     style="margin-bottom: 10px;cursor:pointer"
                                     onclick="@(async () => await PopupImage(image))"/>
                                <br/>
                                <div class="input-group input-grou-sm">
                                    <button class="btn btn-outline-secondary"
                                            @onclick="@(async () => await PopupImage(image))">
                                        <i class="oi oi-fullscreen-enter"></i>
                                    </button>
                                    <button class="btn btn-outline-secondary"
                                            @onclick="@(async () => await EditNotes(image))">
                                        <i class="oi oi-pencil"></i> Notes
                                    </button>
                                    <button class="btn btn-outline-secondary"
                                            @onclick="@(() => DownloadImage(image))">
                                        <i class="oi oi-cloud-download"></i> Download
                                    </button>
                                    <button class="btn btn-outline-secondary"
                                            @onclick="@(async () => await DeleteImage(image))">
                                        <i class="oi oi-trash"></i> Delete
                                    </button>
                                </div>
                                <br/>
                            </div>
                        }
                    </div>
                </div>
            }
        </div>
    </div>
</div>

@code {
    [Parameter]
    public Part? Part { get; set; }
    [Parameter]
    public Equipment? Equipment { get; set; }
    private IEnumerable<Image>? _gallery = null;

    protected override async void OnInitialized()
    {
        await RefreshGallery();
    }

    private async Task UploadImage(IBrowserFile file)
    {
        if (Part is not null) await ImageService.Upload(file, Part);
        if (Equipment is not null) await ImageService.Upload(file, Equipment);
    }

    private async void UploadImages(InputFileChangeEventArgs arg)
    {
        _gallery = null;
        var files = arg.GetMultipleFiles(arg.FileCount);

        foreach (var file in files) await UploadImage(file);

        await RefreshGallery();
    }

    async Task RefreshGallery()
    {
        _gallery = await GetGallery();
        StateHasChanged();
    }

    async Task<IEnumerable<Image>> GetGallery()
    {
        IEnumerable<Image> images = Enumerable.Empty<Image>();
        
        if (Part is not null) images = await ImageService.GetAllImages(Part);
        if (Equipment is not null) images = await ImageService.GetAllImages(Equipment);

        return images
            .OrderBy(x => x.Id)
            .ToList();
    }

    async Task DeleteImage(Image image)
    {
        var confirmResult = await ConfirmUiService.Confirm(
            "Delete image", 
            "Are you sure you want to delete this image? This action cannot be reversed.");

        if (confirmResult == ConfirmResult.Cancelled) return;
        
        await ImageService.Delete(image);
        await RefreshGallery();
    }

    async Task PopupImage(Image image)
    {
        var parameters = new ModalParameters
        {
            { "Image", image }
        };
        var options = new ModalOptions
        {
            Position = ModalPosition.Middle,
            Size = ModalSize.Large
        };
        var modal = ModalService.Show<GalleryPopupModal>(
            image.FileName,
            parameters,
            options);
        await modal.Result;
    }
 
    private async Task DownloadImage(Image image)
    {
        var base64Url = await ImageService.GetBase64Url(image);
        await FileService.DownloadFile(image.FileName, base64Url);
    }

    private async Task EditNotes(Image image)
    {
        var parameters = new ModalParameters
        {
            { "HasNotes", image }
        };
        var options = new ModalOptions
        {
            Position = ModalPosition.Middle
        };
        var modal = ModalService.Show<NotesEditorModal>(
            $"Edit notes for {image.FileName}",
            parameters,
            options);
        await modal.Result;
    }
}