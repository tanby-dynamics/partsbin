@using partsbin.Helpers
@using partsbin.Services
@using partsbin.BusinessLogic.Helpers
@using partsbin.BusinessLogic.Models
@using partsbin.BusinessLogic.Services
@using partsbin.Shared.RootCollectionItem;
@inject NavigationManager NavigationManager;
@inject IEquipmentService EquipmentService;
@inject IEquipmentUiService EquipmentUiService;
@inject IToastService ToastService;
@inject IConfirmUiService ConfirmUiService;

<table class="table border">
    <thead>
    <tr>
        <th>Type</th>
        <th>Name</th>
        <th>Manufacturer</th>
        <th>Model number</th>
        <th>Location</th>
        <th>Quantity</th>
        <th>Actions</th>
    </tr>
    </thead>
    <tbody>
    @foreach (var item in Equipment)
    {
        <tr>
            <td>

                @if (item.EquipmentType.HasContent())
                {
                    <a href="/equipment/@item.Id">
                        @item.EquipmentType
                    </a>
                }
                else
                {
                    <span>---</span>
                }
            </td>
            <td>
                @if (item.EquipmentName.HasContent())
                {
                    <a href="/equipment/@item.Id">
                        @item.EquipmentName
                    </a>
                }
                else
                {
                    <span>---</span>
                }
            </td>
            <td>
                @if (item.Manufacturer.HasContent())
                {
                    <a href="/equipment/@item.Id">
                        @item.Manufacturer
                    </a>
                }
                else
                {
                    <span>---</span>
                }
            </td>
            <td>
                @if (item.ModelNumber.HasContent())
                {
                    <a href="/equipment/@item.Id">
                        @item.ModelNumber
                    </a>
                }
                else
                {
                    <span>---</span>
                }
            </td>
            <td>
                @if (item.Location.HasContent())
                {
                    <a href="/equipment/@item.Id">
                        @item.Location
                    </a>
                }
                else
                {
                    <span>---</span>
                }
            </td>
            <td style="@(item.Quantity <= 0 ? "color:#f55" : string.Empty)">
                <ItemQuantity Equipment="@item"
                              Outline="true"/>
            </td>
            <td>
                <div class="btn-group" role="group">
                    <button type="button"
                            @onclick="@(() => NavigationManager.NavigateTo($"/equipment/{item.Id}"))"
                            @onclick:preventDefault
                            class="btn btn-outline-primary btn-sm"
                            title="Open equipment details">
                        <i class="oi oi-eye"></i>
                    </button>
                    <div class="btn-group" role="group">
                        <button class="btn btn-outline-primary dropdown-toggle btn-sm"
                                type="button"
                                data-bs-toggle="dropdown"
                                aria-expanded="false">
                            Actions
                        </button>
                        <ul class="dropdown-menu">
                            <li>
                                <button class="dropdown-item"
                                        type="button"
                                        @onclick:preventDefault
                                        @onclick="@(() => EditEquipment(item))">
                                    Edit in place
                                </button>
                            </li>
                            <li>
                                <button class="dropdown-item"
                                        type="button"
                                        @onclick:preventDefault
                                        @onclick="@(() => NavigationManager.NavigateTo($"/equipment/{item.Id}"))">
                                    Open equipment details
                                </button>
                            </li>
                            <li>
                                <button class="dropdown-item"
                                        type="button"
                                        @onclick:preventDefault
                                        @onclick="@(() => DuplicateEquipment(item))">
                                    Duplicate equipment
                                </button>
                            </li>
                            <li>
                                <hr class="dropdown-divider"/>
                            </li>
                            <li>
                                <button class="dropdown-item"
                                        type="button"
                                        @onclick:preventDefault
                                        @onclick="@(() => DeleteEquipment(item))">
                                    Delete equipment
                                </button>
                            </li>
                        </ul>
                    </div>
                </div>
            </td>
        </tr>
    }
    </tbody>
</table>

@code {

    [Parameter]
    public required List<Equipment> Equipment { get; set; }

    private async void EditEquipment(Equipment equipment)
    {
        await EquipmentUiService.EditEquipment(equipment);
        StateHasChanged();
    }

    private async void DeleteEquipment(Equipment equipment)
    {
        var confirmResult = await ConfirmUiService.Confirm(
            "Delete equipment", 
            "Are you sure you want to delete this equipment?");

        if (confirmResult == ConfirmResult.Cancelled) return;
            
        equipment.IsDeleted = true;
        await EquipmentService.UpdateEquipment(equipment);
        Equipment.Remove(equipment);

        ToastService.ShowSuccess(
            message: "The equipment has been deleted. You can recover it from the rubbish bin.",
            settings: settings =>
            {
               settings.OnClick = () => NavigationManager.NavigateTo("/equipment-rubbish-bin");
            });
        StateHasChanged();
    }

    private async void DuplicateEquipment(Equipment equipment)
    {
        var confirmResult = await ConfirmUiService.Confirm(
            "Duplicate equipment",
            "Are you sure you want to duplicate this equipment?");
        if (confirmResult == ConfirmResult.Cancelled) return;
        
        var duplicate = await EquipmentService.Duplicate(equipment);
        
        NavigationManager.NavigateTo(
            $"/equipment/{duplicate.Id}?d=1",
            forceLoad: true);
        ToastService.ShowSuccess("The equipment has been duplicated, you are working on the duplicate now");
    }

}