@using partsbin.Helpers
@using partsbin.Services
@using System.Globalization
@using partsbin.BusinessLogic.Helpers
@using partsbin.BusinessLogic.Models
@using partsbin.BusinessLogic.Services
@inject IPartService PartService; 
@inject IEquipmentService EquipmentService; 
@inject IToastService ToastService;
@inject ISupplierUiService SupplierUiService;
@inject IRuntimeConfigService RuntimeConfigService;
@inject IConfirmUiService ConfirmUiService;

<div class="card">
    <div class="card-header">
        <div class="row">
            <div class="col-6">
                <h4>Suppliers</h4>
            </div>
            <div class="col-6 text-end">
                <button class="btn btn-outline-primary"
                        type="button"
                        @onclick="Add">
                    Add
                </button>
            </div>
        </div>
    </div>
    <div class="card-body">
        <div class="card-text">
            @foreach (var supplier in _suppliers)
            {
                <div class="row" style="margin-top:10px">
                    <div class="col-12">
                        <div class="card">
                            <h5 class="card-header">
                                @if (supplier.Url.HasContent())
                                {
                                    <a href="@supplier.Url" target="_blank">
                                        @supplier.Name
                                    </a>
                                }
                                else
                                {
                                    @supplier.Name
                                }
                            </h5>
                            <div class="card-body">
                                @if (supplier.PartUrl.HasContent())
                                {
                                    <p>
                                    <a href="@supplier.PartUrl"
                                       target="_blank">
                                        Link to item
                                    </a>
                                    </p>
                                }
                                @if (supplier.UnitPrice != 0.0m)
                                {
                                    <p>
                                        Unit price:
                                        <strong>
                                            @supplier.UnitPrice.FormatCurrency(_cultureInfo)
                                        </strong>
                                    </p>
                                }
                                @if (supplier.HtmlNotes.HasContent())
                                {
                                    <div>
                                        <span>Notes:</span><br/>
                                        @((MarkupString)supplier.HtmlNotes)
                                    </div>
                                }
                            </div>
                            <div class="card-footer">
                                <button class="btn btn-sm btn-outline-primary"
                                        @onclick="() => Edit(supplier)">
                                    <i class="oi oi-pencil"></i> Edit
                                </button>
                                <button class="btn btn-sm btn-outline-danger"
                                        @onclick="@(() => Delete(supplier))">
                                    Delete
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>
</div>

@code {
    [Parameter]
    public Part? Part { get; set; }
    [Parameter]
    public Equipment? Equipment { get; set; }
    private CultureInfo _cultureInfo = CultureInfo.InvariantCulture;
    private IEnumerable<Supplier> _suppliers = Enumerable.Empty<Supplier>();

    protected override async void OnInitialized()
    {
        var config = await RuntimeConfigService.GetRuntimeConfig();
        _cultureInfo = CultureInfo.GetCultureInfo(config.CultureName);

        if (Part is not null) _suppliers = Part.Suppliers;
        else if (Equipment is not null) _suppliers = Equipment.Suppliers;
    }

    private async void Add()
    {
        if (Part is not null) await SupplierUiService.AddSupplier(Part);
        if (Equipment is not null) await SupplierUiService.AddSupplier(Equipment);

        StateHasChanged();
    }
    
    private async void Edit(Supplier supplier)
    {
        if (Part is not null) await SupplierUiService.EditSupplier(Part, supplier);
        if (Equipment is not null) await SupplierUiService.EditSupplier(Equipment, supplier);
        
        StateHasChanged();
    }

    private async void Delete(Supplier supplier)
    {
        var confirmResult = await ConfirmUiService.Confirm(
            "Deleting supplier",
            "Are you sure you want to delete this supplier? It will only be removed for this item. This action cannot be undone.");
        if (confirmResult == ConfirmResult.Cancelled) return;
        
        if (Part is not null)
        {
            Part.Suppliers.Remove(supplier);
            await PartService.UpdatePart(Part);
        }

        if (Equipment is not null)
        {
            Equipment.Suppliers.Remove(supplier);
            await EquipmentService.UpdateEquipment(Equipment);
        }        

        ToastService.ShowSuccess("The supplier has been deleted");
        StateHasChanged();
    }
}