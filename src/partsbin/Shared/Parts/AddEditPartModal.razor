@using Microsoft.AspNetCore.Components
@using partsbin.Helpers
@using partsbin.Logic.Helpers
@using partsbin.Logic.Services
@using partsbin.Services
@using partsbin.Services.Models
@inject IToastService ToastService;
@inject IPartService PartService;
@inject NavigationManager NavigationManager;
@inject IPartUiService PartUiService;
@inject IConfirmUiService ConfirmUiService;

<EditForm Model="@Part" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator/>
    <ValidationSummary/>
    <div class="form-group">
        <div style="margin-top: 10px;">
            <label for="partType">Part type</label>
            <div class="input-group">
                <InputText id="partType"
                           class="form-control"
                           placeholder="Part type (eg. 'Capacitor')"
                           @bind-Value="Part!.PartType"/>
                <button class="btn btn-outline-secondary"
                        @onclick:preventDefault
                        @onclick="@SelectPartType">
                    <i class="oi oi-magnifying-glass"></i>
                </button>
            </div>
        </div>
        <div style="margin-top: 10px;">
            <label for="range">Range</label>
            <div class="input-group">
                <InputText id="range"
                           class="form-control"
                           placeholder="Range (eg. 'Film')"
                           @bind-Value="Part!.Range"/>
                <button class="btn btn-outline-secondary"
                        @onclick:preventDefault
                        @onclick="@SelectRange">
                    <i class="oi oi-magnifying-glass"></i>
                </button>
            </div>
        </div>
        <div style="margin-top: 10px;">
            <label for="partName">Part name</label>
            <div class="input-group">
                <InputText id="partName"
                           class="form-control"
                           placeholder="Part name (eg. 'Raspberry Pi B 4G')"
                           @bind-Value="Part!.PartName"/>
                <button class="btn btn-outline-secondary"
                        @onclick:preventDefault
                        @onclick="@SelectPartName">
                    <i class="oi oi-magnifying-glass"></i>
                </button>
            </div>
        </div>
        <div style="margin-top: 10px;">
            <label for="packageType">Package type</label>
            <div class="input-group">
                <InputText id="packageType"
                           class="form-control"
                           placeholder="Package type (eg. 'DIP', 'SMD')"
                           @bind-Value="Part!.PackageType"/>
                <button class="btn btn-outline-secondary"
                        @onclick:preventDefault
                        @onclick="@SelectPackageType">
                    <i class="oi oi-magnifying-glass"></i>
                </button>
            </div>
        </div>
        <div style="margin-top: 10px;">
            <label for="value">Value</label>
            <InputNumber id="value"
                         class="form-control"
                         placeholder="Value (eg. '0.1')"
                         @bind-Value="Part!.Value"/>
        </div>
        <div style="margin-top: 10px;">
            <label for="valueUnit">Value unit</label>
            <div class="input-group">
                <InputText id="valueUnit"
                           class="form-control"
                           placeholder="Value unit (eg. 'uF')"
                           @bind-Value="Part!.ValueUnit"/>
                <button class="btn btn-outline-secondary"
                        @onclick:preventDefault
                        @onclick="@SelectValueUnit">
                    <i class="oi oi-magnifying-glass"></i>
                </button>
                <button class="btn btn-outline-secondary dropdown-toggle"
                        type="button"
                        data-bs-toggle="dropdown"
                        aria-expanded="false">
                    <i class="oi oi-arrow-circle-left"></i>
                </button>
                <ul class="dropdown-menu dropdown-menu-end">
                    @foreach (var section in _defaultValueUnits)
                    {
                        foreach (var valueUnit in section)
                        {
                            if (valueUnit == GroupEndToken)
                            {
                                <li>
                                    <hr class="dropdown-divider"/>
                                </li>
                            }
                            else
                            {
                                <li>
                                    <button class="btn dropdown-item"
                                            @onclick:preventDefault
                                            @onclick="@(() => ReplaceValueUnit(valueUnit))">
                                        @valueUnit
                                    </button>
                                </li>
                            }
                        }
                    }
                </ul>
            </div>
        </div>
        <div style="margin-top: 10px;">
            <label for="manufacturer">Manufacturer</label>
            <div class="input-group">
                <InputText id="manufacturer"
                           class="form-control"
                           placeholder="Manufacturer (eg. 'Qualcomm')"
                           @bind-Value="Part!.Manufacturer"/>
                <button class="btn btn-outline-secondary"
                        @onclick:preventDefault
                        @onclick="@SelectManufacturer">
                    <i class="oi oi-magnifying-glass"></i>
                </button>
            </div>
        </div>
        <div style="margin-top: 10px;">
            <label for="partNumber">Part number</label>
            <div class="input-group">
                <InputText id="partNumber"
                           class="form-control"
                           placeholder="Part number (eg. 'XC3802')"
                           @bind-Value="Part.PartNumber"/>
                <button class="btn btn-outline-secondary"
                        @onclick:preventDefault
                        @onclick="@SelectPartNumber">
                    <i class="oi oi-magnifying-glass"></i>
                </button>
            </div>
        </div>
        @if (_isNew)
        {
            <div style="margin-top: 10px;">
                <label for="quantity">Quantity</label>
                <InputNumber id="quantity"
                             class="form-control"
                             placeholder="Quantity"
                             @bind-Value="Part!.Quantity"/>
            </div>
        }
        <div>
            <label for="location">Location</label>
            <div class="input-group">
                <InputText id="location"
                           class="form-control"
                           placeholder="Location (eg. 'Shelf 4 Rack 2 Tray 6')"
                           @bind-Value="Part!.Location"/>
                <button class="btn btn-outline-secondary"
                        @onclick:preventDefault
                        @onclick="@SelectLocation">
                    <i class="oi oi-magnifying-glass"></i>
                </button>
            </div>
        </div>
    </div>
    <div style="margin-top: 10px;">
        <button type="submit" class="btn btn-outline-primary">
            @(_isNew ? "Add" : "Update")
        </button>
    </div>
</EditForm>

@code {
        private const string GroupEndToken = "<<<HR>>>";

    [Parameter]
    public Part? Part { get; set; }

    [Parameter]
    public string? PartType { get; set; }
    [Parameter]
    public string? Location { get; set; }
    [Parameter]
    public string? Manufacturer { get; set; }

    private bool _isNew;

    [CascadingParameter]
    BlazoredModalInstance? Modal { get; set; }

    private readonly string[][] _defaultValueUnits =
    {
        new[] { "Ω", "kΩ", "MΩ", GroupEndToken },
        new[] { "pF", "nF", "μF", "mF", GroupEndToken },
        new[] { "mV", "V", GroupEndToken },
        new[] { "Vf", GroupEndToken },
        new[] { "Hz", "kHz", "MHz", "GHz" },
    };

    protected override void OnInitialized()
    {
        _isNew = Part is null;
        Part ??= new Part
        {
            PartType = PartType,
            Location = Location,
            Manufacturer = Manufacturer
        };

        StateHasChanged();
    }

    private async void HandleValidSubmit()
    {
        if (Part is null)
        {
            throw new InvalidOperationException("Part should not be null at this point");
        }
        
        try
        {
            if (_isNew)
            {
                if (
                    Part.PartNumber.HasContent()
                    && (await PartService.CheckForDuplicatePartNumber(Part.PartNumber!))
                )
                {
                    var confirmResult = await ConfirmUiService.Confirm(
                        "The part number is not unique",
                        "There is another part with the same part number. Do you want to continue adding this part?");

                    if (confirmResult == ConfirmResult.Cancelled) return;
                }
                
                Part = await PartService.AddPart(Part!);
                NavigationManager.NavigateTo($"/part/{Part.Id}");
            }
            else
            {
                if (
                    Part.PartNumber.HasContent()
                    && (await PartService.CheckForDuplicatePartNumber(Part.PartNumber!, Part.Id))
                    )
                {
                    var confirmResult = await ConfirmUiService.Confirm(
                        "The part number is not unique",
                        "There is another part with the same part number. Do you want to continue adding this part?");

                    if (confirmResult == ConfirmResult.Cancelled) return;
                }

                await PartService.UpdatePart(Part!);
            }

            await Modal!.CloseAsync(ModalResult.Ok(Part));
        }
        catch (InvalidOperationException ex)
        {
            ToastService.ShowError(ex.Message);
        }
    }

    private async void SelectPartType()
    {
        if (Part is null) return;
        var previous = Part.PartType;
        await PartUiService.SelectPartType(Part);
        if (previous == Part.PartType) return;
        StateHasChanged();
    }

    private async void SelectRange()
    {
        if (Part is null) return;
        var previous = Part.Range;
        await PartUiService.SelectRange(Part);
        if (previous == Part.Range) return;
        StateHasChanged();
    }

    private async void SelectPartName()
    {
        if (Part is null) return;
        var previous = Part.PartName;
        await PartUiService.SelectPartName(Part);
        if (previous == Part.PartName) return;
        StateHasChanged();
    }

    private async void SelectPackageType()
    {
        if (Part is null) return;
        var previous = Part.PackageType;
        await PartUiService.SelectPackageType(Part);
        if (previous == Part.PackageType) return;
        StateHasChanged();
    }

    private async void SelectValueUnit()
    {
        if (Part is null) return;
        var previous = Part.ValueUnit;
        await PartUiService.SelectValueUnit(Part);
        if (previous == Part.ValueUnit) return;
        StateHasChanged();
    }

    private void ReplaceValueUnit(string symbol)
    {
        if (Part is null) return;
        Part.ValueUnit = symbol;
        StateHasChanged();
    }

    private async void SelectManufacturer()
    {
        if (Part is null) return;
        var previous = Part.Manufacturer;
        await PartUiService.SelectManufacturer(Part);
        if (previous == Part.Manufacturer) return;
        StateHasChanged();
    }
    
    private async void SelectPartNumber()
    {
        if (Part is null) return;
        var previous = Part.PartNumber;
        await PartUiService.SelectPartNumber(Part);
        if (previous == Part.PartNumber) return;
        StateHasChanged();
    }

    private async void SelectLocation()
    {
        if (Part is null) return;
        var previous = Part.Location;
        await PartUiService.SelectLocation(Part);
        if (previous == Part.Location) return;
        StateHasChanged();
    }

}