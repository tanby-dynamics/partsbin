@using partsbin.Services
@using System.Text
@inject IPartUiService PartUiService;
@inject IToastService ToastService;
@inject IPartService PartService;

<span>
    <button class="btn btn-light btn-sm"
           @onclick="DecreaseQuantity"
           @onclick:preventDefault
           title="Decrease quantity">
        <i class="oi oi-minus"></i>
    </button>
    <button class="btn btn-sm @GetButtonClass()"
            style="min-width:4em;"
            @onclick="EditQuantity"
            @onclick:preventDefault
            title="Edit quantity">
        @Part.Quantity
    </button>
    <button class="btn btn-light"
            @onclick="IncreaseQuantity"
            @onclick:preventDefault
            title="Increase quantity">
        <i class="oi oi-plus"></i>
    </button>
</span>
                                
@code {
    [Parameter]
    public required Part Part { get; set; }
    [Parameter]
    public EventCallback<Part> PartChanged { get; set; }

    [Parameter]
    public bool Outline { get; set; } = false;
    
    private string GetButtonClass()
    {
        var sb = new StringBuilder();
        
        sb.Append("btn");
        
        if (Outline)
        {
            sb.Append("-outline");
        }

        sb.Append(Part.Quantity > 0 ? "-primary" : "-danger");
        
        return sb.ToString();
    }

    private async void EditQuantity()
    {
        var previousQuantity = Part.Quantity;
        
        await PartUiService.EditQuantity(Part);

        if (previousQuantity == Part.Quantity) return;
        
        if (Part.Quantity < 0)
        {
            ToastService.ShowWarning("The part quantity has been set to less than zero. It has still been saved.");
        }
        else
        {
            ToastService.ShowSuccess("The part quantity has been updated");
        }
        
        StateHasChanged();
        await PartChanged.InvokeAsync(Part);
    }

    private async void IncreaseQuantity()
    {
        Part.Quantity++;
        PartService.UpdatePart(Part);
        StateHasChanged();
        await PartChanged.InvokeAsync(Part);
    }
    
    private async void DecreaseQuantity()
    {
        Part.Quantity--;
        PartService.UpdatePart(Part);
        StateHasChanged();
        await PartChanged.InvokeAsync(Part);
    }
}