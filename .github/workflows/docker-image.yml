name: Build image and deploy to Docker Hub

on:
  workflow_dispatch:
  push:
    branches:
      - main

jobs:
  # Build and push an image built on both ubuntu-latest (AMD64) and macOS (ARM64)
  build-and-push:
    strategy:
      matrix:
        os: [ubuntu-latest, macOS]
    runs-on: ${{ matrix.os }}
    steps:
      - 
        name: Checkout
        uses: actions/checkout@v3
      -
        name: Build the image
        run: docker build -t becdetat/partsbin:latest-${{ matrix.os }} ./src
      - 
        name: Log into Docker Hub
        uses: docker/login-action@f054a8b539a109f9f41c372932f1ae047eff08c9
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      -
        name: Push image to Docker Hub
        uses: docker/build-push-action@ad44023a93711e3deb337508980b4b5e9bcdc5dc
        with:  
          context: ./src
          push: true
          tags: |
            becdetat/partsbin:${{ github.run_number }}-${{ matrix.os }}
            becdetat/partsbin:latest-${{ matrix.os }}
  # Create and push up a combined manifest, so both architectures can be pulled via becdetat/partsbin:latest
  create-combined-manifest:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - 
        name: Log into Docker Hub
        uses: docker/login-action@f054a8b539a109f9f41c372932f1ae047eff08c9
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - 
        name: Create manifest
        run: |
          docker manifest create \
            becdetat/partsbin:latest \
            becdetat/partsbin:latest-macOS \
            becdetat/partsbin:latest-ubuntu-latest
      -
        name: Push manifest
        run: docker manifest push becdetat/partsbin:latest          
  # Create a tagged GitHub release
  create-gh-release:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - 
        name: Create release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ format('release-{0}', github.run_number) }}
          release_name: Release ${{ github.run_number }}
          body: Automated release created by GitHub Actions
          draft: false
          prerelease: false
      -
        name: Upload asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./src
          asset_name: release-${{ github.run_number }}.zip
          asset_content_type: application/zip
